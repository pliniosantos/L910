/* The following code was generated by JFlex 1.4.3 on 12/7/10 5:36 PM */

package com.L910;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/7/10 5:36 PM from the specification file
 * <tt>L910.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\53"+
    "\1\56\1\0\1\4\1\47\1\55\1\0\1\37\1\40\1\7\1\45"+
    "\1\35\1\46\1\0\1\6\1\10\11\11\1\0\1\36\1\51\1\50"+
    "\1\52\2\0\32\4\1\43\1\57\1\44\1\0\1\4\1\0\1\21"+
    "\1\15\1\34\1\26\1\20\1\30\1\24\1\32\1\12\2\4\1\17"+
    "\1\4\1\13\1\16\1\33\1\4\1\23\1\22\1\14\1\27\1\25"+
    "\1\31\3\4\1\41\1\54\1\42\1\0\41\5\2\0\4\4\4\0"+
    "\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0"+
    "\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4\11\0"+
    "\1\4\21\0\130\5\5\0\23\5\12\0\1\4\13\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\0\24\4\1\0\54\4\1\0\46\4\1\0"+
    "\5\4\4\0\202\4\1\0\4\5\3\0\105\4\1\0\46\4\2\0"+
    "\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4\11\0"+
    "\21\5\1\0\27\5\1\0\3\5\1\0\1\5\1\0\2\5\1\0"+
    "\1\5\13\0\33\4\5\0\3\4\15\0\4\5\14\0\6\5\13\0"+
    "\32\4\5\0\13\4\16\5\7\0\12\5\4\0\2\4\1\5\143\4"+
    "\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0\4\5\2\4"+
    "\12\5\3\4\2\0\1\4\17\0\1\5\1\4\1\5\36\4\33\5"+
    "\2\0\3\4\60\0\46\4\13\5\1\4\u014f\0\3\5\66\4\2\0"+
    "\1\5\1\4\20\5\2\0\1\4\4\5\3\0\12\4\2\5\2\0"+
    "\12\5\21\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5\2\0"+
    "\2\5\2\0\3\5\11\0\1\5\4\0\2\4\1\0\3\4\2\5"+
    "\2\0\12\5\4\4\15\0\3\5\1\0\6\4\4\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0"+
    "\1\5\1\0\5\5\4\0\2\5\2\0\3\5\13\0\4\4\1\0"+
    "\1\4\7\0\14\5\3\4\14\0\3\5\1\0\11\4\1\0\3\4"+
    "\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5"+
    "\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0\2\4"+
    "\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\6\5\3\0\2\5\2\0\3\5\10\0\2\5\4\0"+
    "\2\4\1\0\3\4\4\0\12\5\1\0\1\4\20\0\1\5\1\4"+
    "\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4"+
    "\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0\3\4"+
    "\4\0\5\5\3\0\3\5\1\0\4\5\11\0\1\5\17\0\11\5"+
    "\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\4\0\7\5\1\0\3\5\1\0\4\5"+
    "\7\0\2\5\11\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4"+
    "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\5"+
    "\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0\1\4"+
    "\1\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\20\4\4\0\6\5\2\0\3\5\1\0\4\5"+
    "\11\0\1\5\10\0\2\4\4\0\12\5\22\0\2\5\1\0\22\4"+
    "\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5"+
    "\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\4"+
    "\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0\2\4"+
    "\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4"+
    "\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0\5\4"+
    "\1\0\1\4\1\0\6\5\2\0\12\5\2\0\2\4\42\0\1\4"+
    "\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\10\4\1\0\42\4\6\0\24\5\1\0\2\5\4\4"+
    "\4\0\10\5\1\0\44\5\11\0\1\5\71\0\42\4\1\0\5\4"+
    "\1\0\2\4\1\0\7\5\3\0\4\5\6\0\12\5\6\0\6\4"+
    "\4\5\106\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0"+
    "\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0"+
    "\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0"+
    "\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0"+
    "\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0"+
    "\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4\3\5"+
    "\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0\3\4"+
    "\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4\1\5"+
    "\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4\10\0\51\4"+
    "\1\5\126\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5\36\4"+
    "\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0\132\4\6\0\26\4"+
    "\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4"+
    "\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4"+
    "\4\0\15\4\5\0\3\4\1\0\7\4\17\0\4\5\32\0\5\5"+
    "\20\0\2\4\23\0\1\4\13\0\4\5\6\0\6\5\1\0\1\4"+
    "\15\0\1\4\40\0\22\4\36\0\15\5\4\0\1\5\3\0\6\5"+
    "\27\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4"+
    "\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0\3\4"+
    "\1\0\7\4\3\0\3\4\5\0\5\4\26\0\44\4\u0e81\0\3\4"+
    "\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4\2\0"+
    "\2\5\2\0\3\4\1\0\137\4\5\0\50\4\4\0\136\4\21\0"+
    "\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0"+
    "\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0"+
    "\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0"+
    "\66\4\50\0\15\4\3\0\20\5\20\0\4\5\17\0\2\4\30\0"+
    "\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\5\4\0"+
    "\1\4\13\0\12\5\7\0\32\4\4\0\1\4\1\0\32\4\12\0"+
    "\132\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0"+
    "\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\13\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\26\1\3\1\4\1\5\2\6\13\3\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\26\1\27\1\30"+
    "\2\0\1\3\1\31\12\3\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\26\1\3\1\31\12\3\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\2\0\1\44\1\45\6\3\1\46\1\3\1\47\3\3"+
    "\2\26\1\44\1\45\6\3\1\46\1\3\1\47\3\3"+
    "\1\0\1\50\1\3\1\51\2\3\1\52\1\53\2\3"+
    "\1\26\1\2\1\50\1\3\1\51\2\3\1\52\1\53"+
    "\6\3\1\54\1\55\4\3\1\54\1\55\1\3\1\56"+
    "\1\57\1\60\2\3\1\56\1\57\1\60\1\3\1\61"+
    "\1\62\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\140\0\300\0\360\0\140"+
    "\0\140\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\140\0\140\0\140"+
    "\0\140\0\140\0\140\0\140\0\140\0\140\0\140\0\140"+
    "\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0"+
    "\0\u04e0\0\u0480\0\u0480\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0480"+
    "\0\u0480\0\u0480\0\u0480\0\u0480\0\u0480\0\u0480\0\u0480\0\u0480"+
    "\0\u0480\0\u0480\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\140\0\u0870\0\u08a0\0\u08d0\0\u0900\0\300\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\140\0\140\0\140\0\140\0\140\0\140\0\u0b10\0\u0b40"+
    "\0\u0b70\0\u04b0\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0480\0\u0480\0\u0480\0\u0480"+
    "\0\u0480\0\u0480\0\140\0\140\0\140\0\140\0\u0d80\0\u0db0"+
    "\0\300\0\300\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\300\0\u0f00\0\300\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\u04b0\0\u04b0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110"+
    "\0\u04b0\0\u1140\0\u04b0\0\u1170\0\u11a0\0\u11d0\0\u1200\0\300"+
    "\0\u1230\0\300\0\u1260\0\u1290\0\u12c0\0\300\0\u12f0\0\u1320"+
    "\0\u1350\0\u0480\0\u04b0\0\u1380\0\u04b0\0\u13b0\0\u13e0\0\u1410"+
    "\0\u04b0\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\300"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u04b0\0\u1650\0\u1680"+
    "\0\300\0\300\0\300\0\u16b0\0\u16e0\0\u04b0\0\u04b0\0\u04b0"+
    "\0\u1710\0\300\0\300\0\u04b0\0\u04b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\2\6\1\16\1\6"+
    "\1\17\1\20\1\6\1\21\1\22\1\6\1\23\1\24"+
    "\1\6\1\25\1\6\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\3\1\47\1\4\1\5"+
    "\1\47\1\50\1\47\1\51\1\52\1\53\1\54\1\55"+
    "\1\50\1\56\1\57\2\50\1\60\1\50\1\61\1\62"+
    "\1\50\1\63\1\64\1\50\1\65\1\66\1\50\1\67"+
    "\1\50\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\62\0\1\5\61\0\2\6"+
    "\2\0\25\6\31\0\1\113\1\114\60\0\2\12\52\0"+
    "\2\6\2\0\3\6\1\115\14\6\1\116\4\6\27\0"+
    "\2\6\2\0\13\6\1\117\11\6\27\0\2\6\2\0"+
    "\6\6\1\120\16\6\27\0\2\6\2\0\7\6\1\121"+
    "\15\6\27\0\2\6\2\0\4\6\1\122\20\6\27\0"+
    "\2\6\2\0\10\6\1\123\14\6\27\0\2\6\2\0"+
    "\6\6\1\124\16\6\27\0\2\6\2\0\10\6\1\125"+
    "\14\6\27\0\2\6\2\0\11\6\1\126\13\6\27\0"+
    "\2\6\2\0\22\6\1\127\2\6\27\0\2\6\2\0"+
    "\13\6\1\130\11\6\73\0\1\131\57\0\1\132\57\0"+
    "\1\133\57\0\1\134\63\0\1\135\60\0\1\136\2\0"+
    "\1\47\2\0\53\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\25\50\21\47\2\0\1\47\2\0\3\47\1\137"+
    "\1\140\46\47\2\0\1\47\2\0\5\47\2\54\44\47"+
    "\2\0\1\47\2\0\1\47\2\50\2\47\3\50\1\141"+
    "\14\50\1\142\4\50\21\47\2\0\1\47\2\0\1\47"+
    "\2\50\2\47\13\50\1\143\11\50\21\47\2\0\1\47"+
    "\2\0\1\47\2\50\2\47\6\50\1\144\16\50\21\47"+
    "\2\0\1\47\2\0\1\47\2\50\2\47\7\50\1\145"+
    "\15\50\21\47\2\0\1\47\2\0\1\47\2\50\2\47"+
    "\4\50\1\146\20\50\21\47\2\0\1\47\2\0\1\47"+
    "\2\50\2\47\10\50\1\147\14\50\21\47\2\0\1\47"+
    "\2\0\1\47\2\50\2\47\6\50\1\150\16\50\21\47"+
    "\2\0\1\47\2\0\1\47\2\50\2\47\10\50\1\151"+
    "\14\50\21\47\2\0\1\47\2\0\1\47\2\50\2\47"+
    "\11\50\1\152\13\50\21\47\2\0\1\47\2\0\1\47"+
    "\2\50\2\47\22\50\1\153\2\50\21\47\2\0\1\47"+
    "\2\0\1\47\2\50\2\47\13\50\1\154\11\50\21\47"+
    "\2\0\1\47\2\0\45\47\1\155\5\47\2\0\1\47"+
    "\2\0\45\47\1\156\5\47\2\0\1\47\2\0\45\47"+
    "\1\157\5\47\2\0\1\47\2\0\45\47\1\160\5\47"+
    "\2\0\1\47\2\0\51\47\1\161\1\47\2\0\1\47"+
    "\2\0\52\47\1\162\15\0\1\163\1\164\6\0\1\165"+
    "\32\0\1\166\1\0\1\113\1\4\1\5\55\113\7\167"+
    "\1\170\50\167\4\0\2\6\2\0\4\6\1\171\17\6"+
    "\1\172\27\0\2\6\2\0\17\6\1\173\5\6\27\0"+
    "\2\6\2\0\6\6\1\174\16\6\27\0\2\6\2\0"+
    "\12\6\1\175\12\6\27\0\2\6\2\0\13\6\1\176"+
    "\11\6\27\0\2\6\2\0\4\6\1\177\4\6\1\200"+
    "\6\6\1\201\4\6\27\0\2\6\2\0\2\6\1\202"+
    "\22\6\27\0\2\6\2\0\24\6\1\203\27\0\2\6"+
    "\2\0\7\6\1\204\15\6\27\0\2\6\2\0\2\6"+
    "\1\205\22\6\27\0\2\6\2\0\2\6\1\206\22\6"+
    "\23\0\1\137\1\4\1\5\53\137\2\113\1\207\2\167"+
    "\4\207\1\210\46\207\2\167\1\47\2\0\1\47\2\50"+
    "\2\47\4\50\1\211\17\50\1\212\21\47\2\0\1\47"+
    "\2\0\1\47\2\50\2\47\17\50\1\213\5\50\21\47"+
    "\2\0\1\47\2\0\1\47\2\50\2\47\6\50\1\214"+
    "\16\50\21\47\2\0\1\47\2\0\1\47\2\50\2\47"+
    "\12\50\1\215\12\50\21\47\2\0\1\47\2\0\1\47"+
    "\2\50\2\47\13\50\1\216\11\50\21\47\2\0\1\47"+
    "\2\0\1\47\2\50\2\47\4\50\1\217\4\50\1\220"+
    "\6\50\1\221\4\50\21\47\2\0\1\47\2\0\1\47"+
    "\2\50\2\47\2\50\1\222\22\50\21\47\2\0\1\47"+
    "\2\0\1\47\2\50\2\47\24\50\1\223\21\47\2\0"+
    "\1\47\2\0\1\47\2\50\2\47\7\50\1\224\15\50"+
    "\21\47\2\0\1\47\2\0\1\47\2\50\2\47\2\50"+
    "\1\225\22\50\21\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\2\50\1\226\22\50\21\47\2\0\7\167\1\227"+
    "\50\167\6\0\1\5\1\170\54\0\2\6\2\0\10\6"+
    "\1\230\14\6\27\0\2\6\2\0\7\6\1\231\15\6"+
    "\27\0\2\6\2\0\10\6\1\232\14\6\27\0\2\6"+
    "\2\0\2\6\1\233\22\6\27\0\2\6\2\0\17\6"+
    "\1\234\5\6\27\0\2\6\2\0\16\6\1\235\6\6"+
    "\27\0\2\6\2\0\16\6\1\236\6\6\27\0\2\6"+
    "\2\0\12\6\1\173\12\6\27\0\2\6\2\0\7\6"+
    "\1\237\15\6\27\0\2\6\2\0\3\6\1\240\21\6"+
    "\23\0\1\207\2\167\4\207\1\241\46\207\2\167\1\47"+
    "\2\0\3\47\1\242\1\210\46\47\2\0\1\47\2\0"+
    "\1\47\2\50\2\47\10\50\1\243\14\50\21\47\2\0"+
    "\1\47\2\0\1\47\2\50\2\47\7\50\1\244\15\50"+
    "\21\47\2\0\1\47\2\0\1\47\2\50\2\47\10\50"+
    "\1\245\14\50\21\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\2\50\1\246\22\50\21\47\2\0\1\47\2\0"+
    "\1\47\2\50\2\47\17\50\1\247\5\50\21\47\2\0"+
    "\1\47\2\0\1\47\2\50\2\47\16\50\1\250\6\50"+
    "\21\47\2\0\1\47\2\0\1\47\2\50\2\47\16\50"+
    "\1\251\6\50\21\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\12\50\1\213\12\50\21\47\2\0\1\47\2\0"+
    "\1\47\2\50\2\47\7\50\1\252\15\50\21\47\2\0"+
    "\1\47\2\0\1\47\2\50\2\47\3\50\1\253\21\50"+
    "\21\47\2\0\6\167\1\5\1\227\50\167\4\0\2\6"+
    "\2\0\10\6\1\254\14\6\27\0\2\6\2\0\3\6"+
    "\1\255\21\6\27\0\2\6\2\0\13\6\1\256\11\6"+
    "\27\0\2\6\2\0\7\6\1\257\15\6\27\0\2\6"+
    "\2\0\10\6\1\260\14\6\27\0\2\6\2\0\4\6"+
    "\1\261\20\6\23\0\1\207\2\167\3\207\1\242\1\241"+
    "\46\207\2\167\1\47\2\0\1\47\2\50\2\47\10\50"+
    "\1\262\14\50\21\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\3\50\1\263\21\50\21\47\2\0\1\47\2\0"+
    "\1\47\2\50\2\47\13\50\1\264\11\50\21\47\2\0"+
    "\1\47\2\0\1\47\2\50\2\47\7\50\1\265\15\50"+
    "\21\47\2\0\1\47\2\0\1\47\2\50\2\47\10\50"+
    "\1\266\14\50\21\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\4\50\1\267\20\50\21\47\6\0\2\6\2\0"+
    "\11\6\1\270\13\6\27\0\2\6\2\0\14\6\1\271"+
    "\10\6\27\0\2\6\2\0\3\6\1\272\21\6\27\0"+
    "\2\6\2\0\3\6\1\273\21\6\27\0\2\6\2\0"+
    "\7\6\1\274\15\6\23\0\1\47\2\0\1\47\2\50"+
    "\2\47\11\50\1\275\13\50\21\47\2\0\1\47\2\0"+
    "\1\47\2\50\2\47\14\50\1\276\10\50\21\47\2\0"+
    "\1\47\2\0\1\47\2\50\2\47\3\50\1\277\21\50"+
    "\21\47\2\0\1\47\2\0\1\47\2\50\2\47\3\50"+
    "\1\300\21\50\21\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\7\50\1\301\15\50\21\47\6\0\2\6\2\0"+
    "\3\6\1\302\21\6\27\0\2\6\2\0\3\6\1\303"+
    "\21\6\23\0\1\47\2\0\1\47\2\50\2\47\3\50"+
    "\1\304\21\50\21\47\2\0\1\47\2\0\1\47\2\50"+
    "\2\47\3\50\1\305\21\50\21\47\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\2\11\14\1\13\11"+
    "\50\1\1\11\1\1\2\0\14\1\6\11\24\1\4\11"+
    "\2\0\36\1\1\0\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public Lexer(java.io.InputStream r, SymbolFactory sf){
		this(r);
		this.sf=sf;
	}
	private SymbolFactory sf;
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1752) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return symbol(sym.R_COLCH);
          }
        case 51: break;
        case 27: 
          { return symbol(sym.LEQ);
          }
        case 52: break;
        case 18: 
          { return symbol(sym.ATR);
          }
        case 53: break;
        case 20: 
          { return symbol(sym.GT);
          }
        case 54: break;
        case 33: 
          { string.append('\t');
          }
        case 55: break;
        case 17: 
          { return symbol(sym.RES);
          }
        case 56: break;
        case 37: 
          { return symbol(sym.INC);
          }
        case 57: break;
        case 19: 
          { return symbol(sym.LT);
          }
        case 58: break;
        case 36: 
          { return symbol(sym.INT);
          }
        case 59: break;
        case 21: 
          { return symbol(sym.NOT);
          }
        case 60: break;
        case 31: 
          { return symbol(sym.AND);
          }
        case 61: break;
        case 10: 
          { return symbol(sym.R_PAREN);
          }
        case 62: break;
        case 4: 
          { return symbol(sym.DIV);
          }
        case 63: break;
        case 24: 
          { string.append('\\');
          }
        case 64: break;
        case 47: 
          { return symbol(sym.RETURN);
          }
        case 65: break;
        case 34: 
          { string.append('\r');
          }
        case 66: break;
        case 15: 
          { return symbol(sym.PLUS);
          }
        case 67: break;
        case 28: 
          { return symbol(sym.GEQ);
          }
        case 68: break;
        case 3: 
          { return symbol(sym.IDENT, yytext());
          }
        case 69: break;
        case 23: 
          { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
                                   string.toString());
          }
        case 70: break;
        case 6: 
          { return symbol(sym.INTCONST, new Integer(Integer.parseInt(yytext())));
          }
        case 71: break;
        case 50: 
          { return symbol(sym.PRINTLN);
          }
        case 72: break;
        case 43: 
          { return symbol(sym.VOID);
          }
        case 73: break;
        case 13: 
          { return symbol(sym.L_COLCH);
          }
        case 74: break;
        case 5: 
          { return symbol(sym.TIMES);
          }
        case 75: break;
        case 41: 
          { return symbol(sym.ELSE);
          }
        case 76: break;
        case 35: 
          { string.append('\"');
          }
        case 77: break;
        case 44: 
          { return symbol(sym.WHILE);
          }
        case 78: break;
        case 12: 
          { return symbol(sym.R_CHAVE);
          }
        case 79: break;
        case 25: 
          { return symbol(sym.IF);
          }
        case 80: break;
        case 30: 
          { return symbol(sym.OR);
          }
        case 81: break;
        case 26: 
          { return symbol(sym.EQ);
          }
        case 82: break;
        case 38: 
          { return symbol(sym.REF);
          }
        case 83: break;
        case 32: 
          { string.append('\n');
          }
        case 84: break;
        case 48: 
          { return symbol(sym.READLN);
          }
        case 85: break;
        case 29: 
          { return symbol(sym.NE);
          }
        case 86: break;
        case 2: 
          { /* Ignora */
          }
        case 87: break;
        case 9: 
          { return symbol(sym.L_PAREN);
          }
        case 88: break;
        case 8: 
          { return symbol(sym.PTO_VIRGULA);
          }
        case 89: break;
        case 16: 
          { return symbol(sym.MINUS);
          }
        case 90: break;
        case 49: 
          { return symbol(sym.BOOLEAN);
          }
        case 91: break;
        case 45: 
          { return symbol(sym.PRINT);
          }
        case 92: break;
        case 40: 
          { return symbol(sym.BOOLCONST);
          }
        case 93: break;
        case 42: 
          { return symbol(sym.READ);
          }
        case 94: break;
        case 39: 
          { return symbol(sym.DEC);
          }
        case 95: break;
        case 46: 
          { return symbol(sym.STRING);
          }
        case 96: break;
        case 1: 
          { System.out.println(" --- FIM ---"); throw new Error("Illegal character <"+
                                yytext()+">");
          }
        case 97: break;
        case 7: 
          { return symbol(sym.VIRGULA);
          }
        case 98: break;
        case 22: 
          { string.append( yytext() );
          }
        case 99: break;
        case 11: 
          { return symbol(sym.L_CHAVE);
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new java_cup.runtime.Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
